
#region Using Directives

using System.Collections.Generic;
using System.CommandLine.Parser.Antlr;
using Antlr4.Runtime.Misc;
using System.Linq;

#endregion

namespace System.CommandLine.Parser
{
    /// <summary>
    /// Represents a visitor for the command line parser, which implements the visitor pattern to evaluate the parse tree generated by the parser.
    /// </summary>
    internal class CommandLineVisitor : CommandLineBaseVisitor<IEnumerable<Parameter>>
    {
        #region Public Properties

        /// <summary>
        /// Gets the default parameters, which are the result of the listener walking the parse tree.
        /// </summary>
        public List<string> DefaultParameters { get; } = new List<string>();

        /// <summary>
        /// Gets the parameters, which are the result of the listener walking the parse tree.
        /// </summary>
        public List<Parameter> Parameters { get; } = new List<Parameter>();

        #endregion

        #region CommandLineBaseListener Implementation
        
        ///// <summary>
        ///// Is called when the tree walker exits the default parameter rule.
        ///// </summary>
        ///// <param name="context">The default parameter context, which contains all the information about the default parameter being parsed.</param>
        //public override void VisitDefaultParameter([NotNull] CommandLineParser.DefaultParameterContext context) => this.DefaultParameters.Add(context.GetText().Replace("\"", string.Empty));

        ///// <summary>
        ///// Is called when the tree walker exits the Windows style switch rule.
        ///// </summary>
        ///// <param name="context">The Windows style switch context, which contains all the information about the Windows style switch being parsed.</param>
        //public override void ExitWindowsStyleSwitch([NotNull] CommandLineParser.WindowsStyleSwitchContext context) => this.Parameters.Add(new BooleanParameter
        //{
        //    Name = context.GetText().Replace("/", string.Empty),
        //    Value = true
        //});

        ///// <summary>
        ///// Is called when the tree walker exits the UNIX style switch rule.
        ///// </summary>
        ///// <param name="context">The UNIX style switch context, which contains all the information about the UNIX style switch being parsed.</param>
        //public override void ExitUnixStyleSwitch([NotNull] CommandLineParser.UnixStyleSwitchContext context) => this.Parameters.Add(new BooleanParameter
        //{
        //    Name = context.GetText().Replace("-", string.Empty),
        //    Value = true
        //});

        ///// <summary>
        ///// Is called when the tree walker exits the UNIX style flagged switch rule.
        ///// </summary>
        ///// <param name="context">The UNIX style flagged switch context, which contains all the information about the UNIX style flagged switch being parsed.</param>
        //public override void ExitUnixStyleFlaggedSwitch([NotNull] CommandLineParser.UnixStyleFlaggedSwitchContext context) => this.Parameters.AddRange(context.GetText().Replace("-", string.Empty).Select(flaggedSwitch => new BooleanParameter
        //{
        //    Name = flaggedSwitch.ToString(),
        //    Value = true
        //}));
        
        #endregion
    }
}