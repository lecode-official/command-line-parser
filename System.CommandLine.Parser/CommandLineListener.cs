
#region Using Directives

using System.Collections.Generic;
using System.CommandLine.Parser.Antlr;
using Antlr4.Runtime.Misc;

#endregion

namespace System.CommandLine.Parser
{
    /// <summary>
    /// Represents a listener for the command line parser, which implements the listener pattern to evaluate the parse tree generated by the parser.
    /// </summary>
    internal class CommandLineListener : CommandLineBaseListener
    {
        #region Public Properties

        /// <summary>
        /// Gets the default parameters, which are the result of the listener walking the parse tree.
        /// </summary>
        public List<string> DefaultParameters { get; } = new List<string>();

        /// <summary>
        /// Gets the parameters, which are the result of the listener walking the parse tree.
        /// </summary>
        public List<Parameter> Parameters { get; } = new List<Parameter>();

        #endregion

        #region CommandLineBaseListener Implementation

        /// <summary>
        /// Is called when the tree walker exits the default parameter rule.
        /// </summary>
        /// <param name="context">The default parameter context, which contains all the information about the default parameter being parsed.</param>
        public override void ExitDefaultParameter([NotNull] CommandLineParser.DefaultParameterContext context) => this.DefaultParameters.Add(context.GetText().Replace("\"", string.Empty));

        /// <summary>
        /// Is called when the tree walker exits the parameter rule.
        /// </summary>
        /// <param name="context">The parameter context, which contains all the information about the parameter being parsed.</param>
        public override void ExitParameter([NotNull] CommandLineParser.ParameterContext context)
        {
            base.ExitParameter(context);
        }

        /// <summary>
        /// Is called when the tree walker exits the value rule.
        /// </summary>
        /// <param name="context">The value context, which contains all the information about the value being parsed.</param>
        public override void ExitValue([NotNull] CommandLineParser.ValueContext context)
        {
            base.ExitValue(context);
        }

        #endregion
    }
}