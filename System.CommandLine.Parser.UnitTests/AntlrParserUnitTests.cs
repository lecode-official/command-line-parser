
#region Using Directives

using Antlr4.Runtime;
using Antlr4.Runtime.Tree;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.CommandLine.Parser.Antlr;
using System.IO;

#endregion

namespace System.CommandLine.Parser.UnitTests
{
    /// <summary>
    /// Represents a unit testing class, which contains all of the unit tests for the command line parser.
    /// </summary>
    [TestClass]
    public class AntlrParserUnitTests
    {
        #region Private Methods

        /// <summary>
        /// Lexes the specified input.
        /// </summary>
        /// <param name="input">The input that is to be lexed.</param>
        /// <returns>Returns the lexed tokens from the specified input.</returns>
        private ITokenStream LexInput(string input)
        {
            // Creates a new stream input for the input string
            AntlrInputStream stream = new AntlrInputStream(new StringReader(input));

            // Lexes the input
            ITokenSource lexer = new CommandLineLexer(stream);
            ITokenStream tokens = new CommonTokenStream(lexer);

            // Returns the lexed tokens
            return tokens;
        }

        /// <summary>
        /// Parses the specified token stream.
        /// </summary>
        /// <param name="tokenStream">The token stream that is to be parsed.</param>
        /// <returns>Returns the parse tree generated by parsing the specified token stream.</returns>
        private IParseTree ParseTokens(ITokenStream tokenStream)
        {
            // Parses the token stream
            CommandLineParser parser = new CommandLineParser(tokenStream);
            parser.BuildParseTree = true;
            IParseTree parseTree = parser.commandLine();

            // Returns the generated parse tree
            return parseTree;
        }

        #endregion

        #region General Test Methods

        /// <summary>
        /// Test if the ANTLR4 lexer and parser can handle empty command line parameters.
        /// </summary>
        [TestMethod]
        public void EmptyCommandLineParamentersTest()
        {
            // Lexes the input and checks whether there are no tokens
            ITokenStream tokens = this.LexInput(string.Empty);
            Assert.AreEqual(tokens.Size, 0);

            // Parses the tokens and checks whether the resulting tree is empty
            IParseTree tree = this.ParseTokens(tokens);
            Assert.AreEqual(tree.ChildCount, 0);
        }

        #endregion

        #region Data Type Test Methods

        public void 

        #endregion

        #region Parameter Test Methods

        #endregion
    }
}